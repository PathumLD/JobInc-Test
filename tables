-- AI-Native Talent Platform Database Schema
-- Complete schema with MIS job posting by company reference

-- 1. Base Users Table (Common Fields)
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    profile_image_url TEXT,
    user_type ENUM('candidate', 'employer', 'admin', 'mis', 'recruitment_agency') NOT NULL,
    status ENUM('active', 'inactive', 'suspended', 'pending_verification') DEFAULT 'pending_verification',
    email_verified BOOLEAN DEFAULT FALSE,
    email_verification_token VARCHAR(255),
    password_reset_token VARCHAR(255),
    password_reset_expires_at TIMESTAMP,
    last_login_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL
);

CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_type ON users(user_type);
CREATE INDEX idx_users_status ON users(status);


-- 2. Companies Schema
CREATE TABLE companies (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(200) NOT NULL,
    slug VARCHAR(200) UNIQUE NOT NULL,
    description TEXT,
    website_url TEXT,
    logo_url TEXT,
    industry VARCHAR(100),
    company_size ENUM('startup', '1-10', '11-50', '51-200', '201-500', '501-1000', '1000+') NOT NULL,
    headquarters_location VARCHAR(200),
    founded_year INTEGER,
    company_type ENUM('startup', 'corporation', 'agency', 'non_profit', 'government') DEFAULT 'corporation',
    remote_friendly BOOLEAN DEFAULT FALSE,
    benefits TEXT,
    culture_description TEXT,
    social_media_links JSON,
    verification_status ENUM('pending', 'verified', 'rejected') DEFAULT 'pending',
    verified_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE INDEX idx_companies_slug ON companies(slug);
CREATE INDEX idx_companies_industry ON companies(industry);
CREATE INDEX idx_companies_size ON companies(company_size);
CREATE INDEX idx_companies_verification ON companies(verification_status);


-- 3. Candidate Profile Table (Extends Users)
CREATE TABLE candidates (
    user_id UUID PRIMARY KEY,
    title VARCHAR(200),
    bio TEXT,
    location VARCHAR(200),
    remote_preference ENUM('remote_only', 'hybrid', 'onsite', 'flexible') DEFAULT 'flexible',
    experience_level ENUM('entry', 'junior', 'mid', 'senior', 'lead', 'principal') NOT NULL,
    years_of_experience INTEGER,
    expected_salary_min DECIMAL(10,2),
    expected_salary_max DECIMAL(10,2),
    currency VARCHAR(3) DEFAULT 'USD',
    availability_status ENUM('available', 'open_to_opportunities', 'not_looking') DEFAULT 'available',
    availability_date DATE,
    resume_url TEXT,
    portfolio_url TEXT,
    github_url TEXT,
    linkedin_url TEXT,
    personal_website TEXT,
    ai_collaboration_score DECIMAL(5,2) DEFAULT 0.00,
    prompting_skill_score DECIMAL(5,2) DEFAULT 0.00,
    workflow_automation_score DECIMAL(5,2) DEFAULT 0.00,
    overall_ai_readiness_score DECIMAL(5,2) DEFAULT 0.00,
    interview_ready BOOLEAN DEFAULT FALSE,
    pre_qualified BOOLEAN DEFAULT FALSE,
    profile_completion_percentage INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE INDEX idx_candidates_experience_level ON candidates(experience_level);
CREATE INDEX idx_candidates_availability ON candidates(availability_status);
CREATE INDEX idx_candidates_ai_scores ON candidates(overall_ai_readiness_score);


-- 4. Employer Profile Table (Extends Users)
CREATE TABLE employers (
    user_id UUID PRIMARY KEY,
    company_id UUID NOT NULL,
    job_title VARCHAR(200),
    department VARCHAR(100),
    role ENUM('recruiter', 'hiring_manager', 'hr_admin', 'company_admin') NOT NULL,
    permissions JSON,
    is_primary_contact BOOLEAN DEFAULT FALSE,
    phone_extension VARCHAR(10),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE
);

CREATE INDEX idx_employers_company_id ON employers(company_id);
CREATE INDEX idx_employers_role ON employers(role);


-- 5. MIS User Profile Table (Extends Users with Enhanced Job Posting Capabilities)
CREATE TABLE mis_users (
    user_id UUID PRIMARY KEY,
    access_level ENUM('read_only', 'analyst', 'admin', 'super_admin') NOT NULL,
    department VARCHAR(100),
    reporting_to UUID,
    data_access_scopes JSON,
    job_posting_permissions BOOLEAN DEFAULT FALSE,
    can_post_for_all_companies BOOLEAN DEFAULT FALSE,
    max_active_jobs INTEGER DEFAULT 5,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (reporting_to) REFERENCES mis_users(user_id) ON DELETE SET NULL
);

CREATE INDEX idx_mis_users_access_level ON mis_users(access_level);
CREATE INDEX idx_mis_users_job_posting ON mis_users(job_posting_permissions);


-- 6. MIS Company Access Table (Controls which companies MIS users can post for)
CREATE TABLE mis_company_access (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    mis_user_id UUID NOT NULL,
    company_id UUID NOT NULL,
    can_create_jobs BOOLEAN DEFAULT TRUE,
    can_manage_jobs BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (mis_user_id) REFERENCES mis_users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE,
    UNIQUE KEY unique_mis_company_access (mis_user_id, company_id)
);

CREATE INDEX idx_mis_company_access_user ON mis_company_access(mis_user_id);
CREATE INDEX idx_mis_company_access_company ON mis_company_access(company_id);


-- 7. Recruitment Agency Profile Table (Extends Users)
CREATE TABLE recruitment_agencies (
    user_id UUID PRIMARY KEY,
    agency_id UUID NOT NULL,
    role ENUM('recruiter', 'account_manager', 'agency_admin') NOT NULL,
    specialization VARCHAR(200),
    clients JSON,
    commission_rate DECIMAL(5,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (agency_id) REFERENCES companies(id) ON DELETE CASCADE
);

CREATE INDEX idx_recruitment_agencies_agency_id ON recruitment_agencies(agency_id);
CREATE INDEX idx_recruitment_agencies_role ON recruitment_agencies(role);


-- 8. Skills Schema
CREATE TABLE skills (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) UNIQUE NOT NULL,
    category ENUM('programming_language', 'framework', 'database', 'cloud', 'devops', 'ai_ml', 'soft_skill', 'tool', 'methodology') NOT NULL,
    description TEXT,
    ai_relevant BOOLEAN DEFAULT FALSE,
    popularity_score INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE INDEX idx_skills_category ON skills(category);
CREATE INDEX idx_skills_ai_relevant ON skills(ai_relevant);
CREATE INDEX idx_skills_popularity ON skills(popularity_score);


-- 9. Candidate Skills Schema
CREATE TABLE candidate_skills (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    candidate_id UUID NOT NULL,
    skill_id UUID NOT NULL,
    proficiency_level ENUM('beginner', 'intermediate', 'advanced', 'expert') NOT NULL,
    years_of_experience DECIMAL(3,1),
    is_primary BOOLEAN DEFAULT FALSE,
    verified BOOLEAN DEFAULT FALSE,
    self_assessed BOOLEAN DEFAULT TRUE,
    ai_assessed_score DECIMAL(5,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (candidate_id) REFERENCES candidates(user_id) ON DELETE CASCADE,
    FOREIGN KEY (skill_id) REFERENCES skills(id) ON DELETE CASCADE,
    UNIQUE KEY unique_candidate_skill (candidate_id, skill_id)
);

CREATE INDEX idx_candidate_skills_candidate ON candidate_skills(candidate_id);
CREATE INDEX idx_candidate_skills_skill ON candidate_skills(skill_id);
CREATE INDEX idx_candidate_skills_proficiency ON candidate_skills(proficiency_level);


-- 10. Jobs Schema (Enhanced for MIS Posting)
CREATE TABLE jobs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    company_id UUID NOT NULL,
    creator_id UUID NOT NULL,
    creator_type ENUM('employer', 'mis_user') NOT NULL,
    title VARCHAR(200) NOT NULL,
    slug VARCHAR(250) UNIQUE NOT NULL,
    description TEXT NOT NULL,
    requirements TEXT,
    responsibilities TEXT,
    benefits TEXT,
    job_type ENUM('full_time', 'part_time', 'contract', 'internship', 'freelance') NOT NULL,
    experience_level ENUM('entry', 'junior', 'mid', 'senior', 'lead', 'principal') NOT NULL,
    location VARCHAR(200),
    remote_type ENUM('remote', 'hybrid', 'onsite') NOT NULL,
    salary_min DECIMAL(10,2),
    salary_max DECIMAL(10,2),
    currency VARCHAR(3) DEFAULT 'USD',
    salary_type ENUM('annual', 'monthly', 'weekly', 'daily', 'hourly') DEFAULT 'annual',
    equity_offered BOOLEAN DEFAULT FALSE,
    ai_skills_required BOOLEAN DEFAULT FALSE,
    ai_collaboration_weight DECIMAL(3,2) DEFAULT 0.00,
    prompting_skills_weight DECIMAL(3,2) DEFAULT 0.00,
    automation_skills_weight DECIMAL(3,2) DEFAULT 0.00,
    application_deadline DATE,
    status ENUM('draft', 'published', 'paused', 'closed', 'archived') DEFAULT 'draft',
    published_at TIMESTAMP NULL,
    priority_level INTEGER DEFAULT 1,
    views_count INTEGER DEFAULT 0,
    applications_count INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE,
    CONSTRAINT chk_creator CHECK (
        (creator_type = 'employer' AND creator_id IN (SELECT user_id FROM employers)) OR
        (creator_type = 'mis_user' AND creator_id IN (SELECT user_id FROM mis_users))
);

CREATE INDEX idx_jobs_company ON jobs(company_id);
CREATE INDEX idx_jobs_creator ON jobs(creator_id, creator_type);
CREATE INDEX idx_jobs_status ON jobs(status);
CREATE INDEX idx_jobs_experience_level ON jobs(experience_level);
CREATE INDEX idx_jobs_remote_type ON jobs(remote_type);
CREATE INDEX idx_jobs_published ON jobs(published_at);


-- 11. Job Skills Schema
CREATE TABLE job_skills (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    job_id UUID NOT NULL,
    skill_id UUID NOT NULL,
    required_level ENUM('nice_to_have', 'preferred', 'required', 'must_have') NOT NULL,
    proficiency_level ENUM('beginner', 'intermediate', 'advanced', 'expert') NOT NULL,
    years_required DECIMAL(3,1),
    weight DECIMAL(3,2) DEFAULT 1.00,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (job_id) REFERENCES jobs(id) ON DELETE CASCADE,
    FOREIGN KEY (skill_id) REFERENCES skills(id) ON DELETE CASCADE,
    UNIQUE KEY unique_job_skill (job_id, skill_id)
);

CREATE INDEX idx_job_skills_job ON job_skills(job_id);
CREATE INDEX idx_job_skills_skill ON job_skills(skill_id);
CREATE INDEX idx_job_skills_required_level ON job_skills(required_level);


-- 12. Applications Schema
CREATE TABLE applications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    job_id UUID NOT NULL,
    candidate_id UUID NOT NULL,
    status ENUM('pending', 'screening', 'ai_assessment', 'interview', 'technical_test', 'final_review', 'offered', 'accepted', 'rejected', 'withdrawn') DEFAULT 'pending',
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    cover_letter TEXT,
    ai_match_score DECIMAL(5,2),
    skill_match_percentage DECIMAL(5,2),
    experience_match_score DECIMAL(5,2),
    ai_readiness_match DECIMAL(5,2),
    overall_fit_score DECIMAL(5,2),
    recruiter_notes TEXT,
    candidate_notes TEXT,
    interview_scheduled_at TIMESTAMP NULL,
    interview_completed_at TIMESTAMP NULL,
    offer_extended_at TIMESTAMP NULL,
    offer_accepted_at TIMESTAMP NULL,
    rejection_reason TEXT,
    rejected_at TIMESTAMP NULL,
    withdrawn_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (job_id) REFERENCES jobs(id) ON DELETE CASCADE,
    FOREIGN KEY (candidate_id) REFERENCES candidates(user_id) ON DELETE CASCADE,
    UNIQUE KEY unique_job_candidate (job_id, candidate_id)
);

CREATE INDEX idx_applications_job ON applications(job_id);
CREATE INDEX idx_applications_candidate ON applications(candidate_id);
CREATE INDEX idx_applications_status ON applications(status);
CREATE INDEX idx_applications_score ON applications(overall_fit_score);
CREATE INDEX idx_applications_applied ON applications(applied_at);


-- 13. AI Assessments Schema
CREATE TABLE ai_assessments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    candidate_id UUID NOT NULL,
    assessment_type ENUM('ai_collaboration', 'prompting_skills', 'workflow_automation', 'coding_with_ai', 'comprehensive') NOT NULL,
    status ENUM('scheduled', 'in_progress', 'completed', 'expired', 'cancelled') DEFAULT 'scheduled',
    score DECIMAL(5,2),
    max_score DECIMAL(5,2) DEFAULT 100.00,
    time_taken_minutes INTEGER,
    ai_engine_used VARCHAR(50),
    assessment_data JSON,
    feedback TEXT,
    recommendations TEXT,
    strengths JSON,
    improvement_areas JSON,
    started_at TIMESTAMP NULL,
    completed_at TIMESTAMP NULL,
    expires_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (candidate_id) REFERENCES candidates(user_id) ON DELETE CASCADE
);

CREATE INDEX idx_ai_assessments_candidate ON ai_assessments(candidate_id);
CREATE INDEX idx_ai_assessments_type ON ai_assessments(assessment_type);
CREATE INDEX idx_ai_assessments_status ON ai_assessments(status);
CREATE INDEX idx_ai_assessments_score ON ai_assessments(score);


-- 14. Interviews Schema
CREATE TABLE interviews (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    application_id UUID NOT NULL,
    interviewer_id UUID,
    interview_type ENUM('phone_screening', 'video_call', 'ai_video', 'technical', 'behavioral', 'final') NOT NULL,
    status ENUM('scheduled', 'in_progress', 'completed', 'cancelled', 'no_show') DEFAULT 'scheduled',
    scheduled_at TIMESTAMP NOT NULL,
    duration_minutes INTEGER DEFAULT 60,
    meeting_link TEXT,
    meeting_id VARCHAR(100),
    ai_conducted BOOLEAN DEFAULT FALSE,
    ai_analysis JSON,
    interview_notes TEXT,
    technical_assessment_data JSON,
    behavioral_scores JSON,
    communication_score DECIMAL(3,2),
    technical_score DECIMAL(3,2),
    cultural_fit_score DECIMAL(3,2),
    overall_rating DECIMAL(3,2),
    recommendation ENUM('strong_hire', 'hire', 'maybe', 'no_hire', 'strong_no_hire'),
    feedback_for_candidate TEXT,
    recording_url TEXT,
    transcript TEXT,
    started_at TIMESTAMP NULL,
    completed_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (application_id) REFERENCES applications(id) ON DELETE CASCADE,
    FOREIGN KEY (interviewer_id) REFERENCES users(id) ON DELETE SET NULL
);

CREATE INDEX idx_interviews_application ON interviews(application_id);
CREATE INDEX idx_interviews_interviewer ON interviews(interviewer_id);
CREATE INDEX idx_interviews_status ON interviews(status);
CREATE INDEX idx_interviews_scheduled ON interviews(scheduled_at);
CREATE INDEX idx_interviews_type ON interviews(interview_type);


-- 15. Notifications Schema
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    type ENUM('application_update', 'interview_scheduled', 'assessment_invitation', 'job_match', 'message', 'system') NOT NULL,
    title VARCHAR(200) NOT NULL,
    message TEXT NOT NULL,
    data JSON,
    read_at TIMESTAMP NULL,
    action_url TEXT,
    priority ENUM('low', 'medium', 'high', 'urgent') DEFAULT 'medium',
    expires_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE INDEX idx_notifications_user ON notifications(user_id);
CREATE INDEX idx_notifications_type ON notifications(type);
CREATE INDEX idx_notifications_read ON notifications(read_at);
CREATE INDEX idx_notifications_created ON notifications(created_at);


-- 16. Messages Schema
CREATE TABLE messages (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    conversation_id UUID NOT NULL,
    sender_id UUID NOT NULL,
    recipient_id UUID NOT NULL,
    message_type ENUM('text', 'file', 'system', 'ai_generated') DEFAULT 'text',
    content TEXT NOT NULL,
    attachments JSON,
    read_at TIMESTAMP NULL,
    edited_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (sender_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (recipient_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE INDEX idx_messages_conversation ON messages(conversation_id);
CREATE INDEX idx_messages_sender ON messages(sender_id);
CREATE INDEX idx_messages_recipient ON messages(recipient_id);
CREATE INDEX idx_messages_created ON messages(created_at);


-- 17. Conversations Schema
CREATE TABLE conversations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    application_id UUID,
    participant_1_id UUID NOT NULL,
    participant_2_id UUID NOT NULL,
    last_message_at TIMESTAMP,
    last_message_preview TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (application_id) REFERENCES applications(id) ON DELETE SET NULL,
    FOREIGN KEY (participant_1_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (participant_2_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE KEY unique_participants (participant_1_id, participant_2_id, application_id)
);

CREATE INDEX idx_conversations_participants ON conversations(participant_1_id, participant_2_id);
CREATE INDEX idx_conversations_application ON conversations(application_id);
CREATE INDEX idx_conversations_updated ON conversations(updated_at);


-- 18. AI Analytics Schema
CREATE TABLE ai_analytics (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    entity_type ENUM('candidate', 'job', 'application', 'interview') NOT NULL,
    entity_id UUID NOT NULL,
    metric_name VARCHAR(100) NOT NULL,
    metric_value DECIMAL(10,4),
    metric_data JSON,
    calculation_date DATE NOT NULL,
    ai_model_version VARCHAR(50),
    confidence_score DECIMAL(3,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_ai_analytics_entity ON ai_analytics(entity_type, entity_id);
CREATE INDEX idx_ai_analytics_metric ON ai_analytics(metric_name);
CREATE INDEX idx_ai_analytics_date ON ai_analytics(calculation_date);


-- 19. Saved Jobs Schema
CREATE TABLE saved_jobs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    candidate_id UUID NOT NULL,
    job_id UUID NOT NULL,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (candidate_id) REFERENCES candidates(user_id) ON DELETE CASCADE,
    FOREIGN KEY (job_id) REFERENCES jobs(id) ON DELETE CASCADE,
    UNIQUE KEY unique_saved_job (candidate_id, job_id)
);

CREATE INDEX idx_saved_jobs_candidate ON saved_jobs(candidate_id);
CREATE INDEX idx_saved_jobs_job ON saved_jobs(job_id);


-- 20. Job Views Schema
CREATE TABLE job_views (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    job_id UUID NOT NULL,
    user_id UUID,
    ip_address VARCHAR(45),
    user_agent TEXT,
    referrer_url TEXT,
    viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (job_id) REFERENCES jobs(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
);

CREATE INDEX idx_job_views_job ON job_views(job_id);
CREATE INDEX idx_job_views_user ON job_views(user_id);
CREATE INDEX idx_job_views_date ON job_views(viewed_at);


-- 21. Subscription Plans Schema
CREATE TABLE subscription_plans (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    plan_type ENUM('free', 'basic', 'premium', 'enterprise') NOT NULL,
    user_type ENUM('candidate', 'employer', 'agency') NOT NULL,
    price_monthly DECIMAL(8,2),
    price_yearly DECIMAL(8,2),
    features JSON NOT NULL,
    limits JSON,
    active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE INDEX idx_subscription_plans_type ON subscription_plans(plan_type, user_type);
CREATE INDEX idx_subscription_plans_active ON subscription_plans(active);


-- 22. User Subscriptions Schema
CREATE TABLE user_subscriptions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    plan_id UUID NOT NULL,
    status ENUM('active', 'cancelled', 'expired', 'suspended') DEFAULT 'active',
    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP,
    cancelled_at TIMESTAMP NULL,
    stripe_subscription_id VARCHAR(255),
    stripe_customer_id VARCHAR(255),
    billing_cycle ENUM('monthly', 'yearly') DEFAULT 'monthly',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (plan_id) REFERENCES subscription_plans(id) ON DELETE RESTRICT
);

CREATE INDEX idx_user_subscriptions_user ON user_subscriptions(user_id);
CREATE INDEX idx_user_subscriptions_plan ON user_subscriptions(plan_id);
CREATE INDEX idx_user_subscriptions_status ON user_subscriptions(status);


-- 23. System Settings Schema
CREATE TABLE system_settings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    setting_key VARCHAR(100) UNIQUE NOT NULL,
    setting_value TEXT,
    setting_type ENUM('string', 'number', 'boolean', 'json') DEFAULT 'string',
    description TEXT,
    category VARCHAR(50),
    is_public BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE INDEX idx_system_settings_key ON system_settings(setting_key);
CREATE INDEX idx_system_settings_category ON system_settings(category);


-- Additional Performance Indexes
CREATE INDEX idx_candidates_experience_location ON candidates(experience_level, location);
CREATE INDEX idx_jobs_status_published ON jobs(status, published_at);
CREATE INDEX idx_applications_status_score








generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserType {
  candidate
  employer
  admin
  mis
  recruitment_agency
}

enum UserStatus {
  active
  inactive
  suspended
  pending_verification
}

enum RemotePreference {
  remote_only
  hybrid
  onsite
  flexible
}

enum ExperienceLevel {
  entry
  junior
  mid
  senior
  lead
  principal
}

enum AvailabilityStatus {
  available
  open_to_opportunities
  not_looking
}

enum Gender {
  male
  female
  other
  prefer_not_to_say
}

enum PhoneType {
  mobile
  home
  work
  other
}

enum EmploymentType {
  full_time
  part_time
  contract
  internship
  freelance
  volunteer
}

enum LanguageProficiency {
  native
  fluent
  professional
  conversational
  basic
}

enum CompanySize {
  startup
  one_to_ten
  eleven_to_fifty
  fifty_one_to_two_hundred
  two_hundred_one_to_five_hundred
  five_hundred_one_to_one_thousand
  one_thousand_plus
}

enum CompanyType {
  startup
  corporation
  agency
  non_profit
  government
}

enum VerificationStatus {
  pending
  verified
  rejected
}

enum JobType {
  full_time
  part_time
  contract
  internship
  freelance
}

enum JobStatus {
  draft
  published
  paused
  closed
  archived
}

enum SalaryType {
  annual
  monthly
  weekly
  daily
  hourly
}

enum CreatorType {
  employer
  mis_user
}

enum AccessLevel {
  read_only
  analyst
  admin
  super_admin
}

enum RequiredLevel {
  nice_to_have
  preferred
  required
  must_have
}

enum ProficiencyLevel {
  beginner
  intermediate
  advanced
  expert
}

enum ApplicationStatus {
  pending
  screening
  ai_assessment
  interview
  technical_test
  final_review
  offered
  accepted
  rejected
  withdrawn
}

enum EmployerRole {
  recruiter
  hiring_manager
  hr_admin
  company_admin
}

enum AgencyRole {
  recruiter
  account_manager
  agency_admin
}

enum RemoteType {
  remote
  hybrid
  onsite
}

enum InterviewType {
  phone_screening
  video_call
  ai_video
  technical
  behavioral
  final
}

enum InterviewStatus {
  scheduled
  in_progress
  completed
  cancelled
  no_show
}

enum Recommendation {
  strong_hire
  hire
  maybe
  no_hire
  strong_no_hire
}

enum SalaryVisibility {
  confidential
  range_only
  exact
  negotiable
}

enum WorkAuthorization {
  citizen
  permanent_resident
  work_visa
  requires_sponsorship
  other
}

enum PreferredShift {
  day
  evening
  night
  rotating
  flexible
}

enum WorkAvailability {
  full_time
  part_time
  contract
  freelance
  internship
  volunteer
}

enum VerificationMethod {
  manual
  automated
  third_party
  document_upload
}

enum SkillCategory {
  programming
  framework
  database
  devops
  design
  analytics
  marketing
  management
  language
  other
}

enum RemoteWorkPreference {
  remote_only
  hybrid
  onsite
  flexible
  none
}

model User {
  id                        String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                     String             @unique @db.VarChar(255)
  password                  String?            @db.VarChar(255)
  role                      UserType?
  status                    UserStatus?        @default(pending_verification)
  email_verified            Boolean?           @default(false)
  email_verification_token  String?            @db.VarChar(255)
  password_reset_token      String?            @db.VarChar(255)
  password_reset_expires_at DateTime?
  last_login_at             DateTime?
  created_at                DateTime?          @default(now())
  updated_at                DateTime?          @updatedAt
  deleted_at                DateTime?
  candidate                 Candidate?
  employer                  Employer?
  conductedInterviews       Interview[]        @relation("UserConductedInterviews")
  viewedJobs                JobView[]          @relation("UserJobViews")
  mis_user                  MisUser?
  recruitment_agency        RecruitmentAgency?

  @@map("user")
}

model Candidate {
  user_id                       String             @id @db.Uuid
  first_name                    String?            @db.VarChar(100)
  last_name                     String?            @db.VarChar(100)
  additional_name               String?            @db.VarChar(100)
  gender                        Gender?
  date_of_birth                 DateTime?          @db.Date
  title                         String?            @db.VarChar(200)
  current_position              String?            @db.VarChar(200)
  industry                      String?            @db.VarChar(100)
  bio                           String?
  about                         String?
  country                       String?            @db.VarChar(100)
  city                          String?            @db.VarChar(100)
  location                      String?            @db.VarChar(200)
  address                       String?
  phone1                        String?            @db.VarChar(20)
  phone2                        String?
  personal_website              String?
  nic                           String?            @db.VarChar(50)
  passport                      String?            @db.VarChar(50)
  remote_preference             RemotePreference?  @default(flexible)
  experience_level              ExperienceLevel?   @default(entry)
  years_of_experience           Int?               @default(0)
  expected_salary_min           Float?             @default(0)
  expected_salary_max           Float?             @default(0)
  currency                      String?            @default("USD") @db.VarChar(4)
  profile_image_url             String?
  availability_status           AvailabilityStatus? @default(available)
  availability_date             DateTime?          @db.Date
  resume_url                    String?
  portfolio_url                 String?
  github_url                    String?
  linkedin_url                  String?
  professional_summary          String?            @db.Text
  total_years_experience        Float?             @default(0.0)
  open_to_relocation            Boolean?           @default(false)
  willing_to_travel             Boolean?           @default(false)
  security_clearance            Boolean?           @default(false)
  disability_status             String?            @db.VarChar(100)
  veteran_status                String?            @db.VarChar(100)
  pronouns                      String?            @db.VarChar(50)
  salary_visibility             SalaryVisibility?  @default(confidential)
  notice_period                 Int?               @default(30)
  work_authorization            WorkAuthorization? 
  visa_assistance_needed        Boolean?           @default(false)
  work_availability             WorkAvailability?  @default(full_time)
  ai_collaboration_score        Float?             @default(0.0)
  prompting_skill_score         Float?             @default(0.0)
  workflow_automation_score     Float?             @default(0.0)
  overall_ai_readiness_score    Float?             @default(0.0)
  interview_ready               Boolean?           @default(false)
  pre_qualified                 Boolean?           @default(false)
  profile_completion_percentage Int?               @default(0)
  created_at                    DateTime?          @default(now())
  updated_at                    DateTime?          @updatedAt
  
  // Relationships
  accomplishments               Accomplishment[]
  applications                  Application[]
  awards                        Award[]
  projects                      Project[]
  user                          User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  skills                        CandidateSkill[]
  educations                    Education[]
  languages                     Language[]
  resumes                       Resume[]
  volunteering                  Volunteering[]
  work_experiences              WorkExperience[]
  certificates                  Certificate[]

  @@index([experience_level])
  @@index([availability_status])
  @@index([overall_ai_readiness_score])
  @@index([country, city])
  @@index([industry])
  @@map("candidate")
}

model WorkExperience {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidate_id    String           @db.Uuid
  title           String?          @db.VarChar(200)
  employment_type EmploymentType?  @default(full_time)
  is_current      Boolean?         @default(false)
  company         String?          @db.VarChar(200)
  start_date      DateTime?        @db.Date
  end_date        DateTime?        @db.Date
  location        String?          @db.VarChar(200)
  description     String?
  job_source      String?          @db.VarChar(100)
  skill_ids       String[]         @db.Uuid
  media_url       String?
  created_at      DateTime?        @default(now())
  updated_at      DateTime?        @updatedAt
  accomplishments Accomplishment[]
  candidate       Candidate        @relation(fields: [candidate_id], references: [user_id], onDelete: Cascade)

  @@index([candidate_id])
  @@index([is_current])
  @@map("work_experience")
}

model Accomplishment {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidate_id       String          @db.Uuid
  work_experience_id String?         @db.Uuid
  resume_id          String?         @db.Uuid
  title              String?         @db.VarChar(300)
  description        String?
  created_at         DateTime?       @default(now())
  updated_at         DateTime?       @updatedAt
  candidate          Candidate       @relation(fields: [candidate_id], references: [user_id], onDelete: Cascade)
  resume             Resume?         @relation(fields: [resume_id], references: [id])
  work_experience    WorkExperience? @relation(fields: [work_experience_id], references: [id])

  @@index([candidate_id])
  @@index([work_experience_id])
  @@index([resume_id])
  @@map("accomplishment")
}

model Education {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidate_id         String    @db.Uuid
  degree_diploma       String?   @db.VarChar(100)
  university_school    String?   @db.VarChar(100)
  field_of_study       String?   @db.VarChar(100)
  description          String?   
  start_date           DateTime? @db.Date
  end_date             DateTime? @db.Date
  grade                String?   @db.VarChar(50)
  activities_societies String?
  skill_ids            String[]  @db.Uuid
  media_url            String?
  created_at           DateTime? @default(now())
  updated_at           DateTime? @updatedAt
  candidate            Candidate @relation(fields: [candidate_id], references: [user_id], onDelete: Cascade)

  @@index([candidate_id])
  @@map("education")
}

model Skill {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String           @unique @db.VarChar(100)
  category         String?          @db.VarChar(50)
  description      String?
  is_active        Boolean?         @default(true)
  created_at       DateTime?        @default(now())
  updated_at       DateTime?        @updatedAt
  candidate_skills CandidateSkill[]
  job_skills       JobSkill[]

  @@index([name])
  @@index([category])
  @@map("skill")
}

model CandidateSkill {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidate_id        String    @db.Uuid
  skill_id            String    @db.Uuid
  skill_source        String?   @db.VarChar(50)
  proficiency         Int?      @default(50)
  years_of_experience Float?    @default(0)
  source_title        String?   @db.VarChar(200)
  source_company      String?   @db.VarChar(200)
  source_institution  String?   @db.VarChar(200)
  source_authority    String?   @db.VarChar(200)
  source_type         String?   @db.VarChar(50)
  created_at          DateTime? @default(now())
  updated_at          DateTime? @updatedAt
  candidate           Candidate @relation(fields: [candidate_id], references: [user_id], onDelete: Cascade)
  skill               Skill     @relation(fields: [skill_id], references: [id], onDelete: Cascade)

  @@unique([candidate_id, skill_id])
  @@index([candidate_id])
  @@index([skill_id])
  @@index([skill_source])
  @@map("candidate_skill")
}

model Language {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidate_id        String               @db.Uuid
  language            String?              @db.VarChar(100)
  is_native           Boolean?             @default(false)
  oral_proficiency    LanguageProficiency?
  written_proficiency LanguageProficiency?
  created_at          DateTime?            @default(now())
  updated_at          DateTime?            @updatedAt
  candidate           Candidate            @relation(fields: [candidate_id], references: [user_id], onDelete: Cascade)

  @@index([candidate_id])
  @@map("language")
}

model Award {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidate_id    String    @db.Uuid
  title           String?   @db.VarChar(200)
  associated_with String?   @db.VarChar(200)
  offered_by      String?   @db.VarChar(200)
  date            DateTime? @db.Date
  description     String?
  media_url       String?
  skill_ids       String[]  @db.Uuid
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt
  candidate       Candidate @relation(fields: [candidate_id], references: [user_id], onDelete: Cascade)

  @@index([candidate_id])
  @@map("award")
}

model Project {
  id                    String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidate_id          String              @db.Uuid
  name                  String?             @db.VarChar(200)
  description           String?
  start_date            DateTime?           @db.Date
  end_date              DateTime?           @db.Date
  is_current            Boolean?            @default(false)
  role                  String?             @db.VarChar(100)
  responsibilities      String[]
  technologies          String[]            @db.VarChar(100)
  tools                 String[]            @db.VarChar(100)
  methodologies         String[]            @db.VarChar(100)
  is_confidential       Boolean?            @default(false)
  can_share_details     Boolean?            @default(false)
  url                   String?
  repository_url        String?
  media_urls            String[]
  skills_gained         String[]            @db.VarChar(100)
  created_at            DateTime?           @default(now())
  updated_at            DateTime?           @updatedAt
  candidate             Candidate           @relation(fields: [candidate_id], references: [user_id], onDelete: Cascade)

  @@index([candidate_id])
  @@map("project")
}

model Volunteering {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidate_id String    @db.Uuid
  role         String?   @db.VarChar(200)
  institution  String?   @db.VarChar(200)
  cause        String?   @db.VarChar(200)
  start_date   DateTime? @db.Date
  end_date     DateTime? @db.Date
  is_current   Boolean?  @default(false)
  description  String?
  media_url    String?
  created_at   DateTime? @default(now())
  updated_at   DateTime? @updatedAt
  candidate    Candidate @relation(fields: [candidate_id], references: [user_id], onDelete: Cascade)

  @@index([candidate_id])
  @@map("volunteering")
}

model Certificate {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidate_id      String    @db.Uuid
  name              String?   @db.VarChar(200)
  issuing_authority String?   @db.VarChar(200)
  issue_date        DateTime? @db.Date
  expiry_date       DateTime? @db.Date
  credential_id     String?   @db.VarChar(100)
  credential_url    String?
  description       String?
  skill_ids         String[]  @db.Uuid
  media_url         String?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @updatedAt
  candidate         Candidate @relation(fields: [candidate_id], references: [user_id], onDelete: Cascade)

  @@index([candidate_id])
  @@index([issue_date])
  @@map("certificate")
}

model Resume {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidate_id     String           @db.Uuid
  is_allow_fetch   Boolean?         @default(true)
  resume_url       String?
  original_filename String?         @db.VarChar(255)
  file_size        Int?
  file_type        String?          @db.VarChar(50)
  is_primary       Boolean?         @default(false)
  uploaded_at      DateTime?        @default(now())
  created_at       DateTime?        @default(now())
  updated_at       DateTime?        @updatedAt
  accomplishments  Accomplishment[]
  candidate        Candidate        @relation(fields: [candidate_id], references: [user_id], onDelete: Cascade)

  @@index([candidate_id])
  @@index([is_primary])
  @@map("resume")
}

model Company {
  id                    String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String              @db.VarChar(200)
  slug                  String              @unique @db.VarChar(200)
  description           String?
  website_url           String?
  logo_url              String?
  industry              String?             @db.VarChar(100)
  company_size          CompanySize
  headquarters_location String?             @db.VarChar(200)
  founded_year          Int?
  company_type          CompanyType         @default(corporation)
  remote_friendly       Boolean             @default(false)
  benefits              String?
  culture_description   String?
  social_media_links    Json?
  verification_status   VerificationStatus  @default(pending)
  verified_at           DateTime?
  created_at            DateTime            @default(now())
  updated_at            DateTime            @updatedAt
  employers             Employer[]
  jobs                  Job[]
  mis_access            MisCompanyAccess[]
  recruitment_agencies  RecruitmentAgency[]

  @@index([slug])
  @@index([industry])
  @@index([company_size])
  @@index([verification_status])
  @@map("company")
}

model MisUser {
  user_id                    String             @id @db.Uuid
  access_level               AccessLevel
  department                 String?            @db.VarChar(100)
  reporting_to               String?            @db.Uuid
  data_access_scopes         Json?
  job_posting_permissions    Boolean            @default(false)
  can_post_for_all_companies Boolean            @default(false)
  max_active_jobs            Int                @default(5)
  created_at                 DateTime           @default(now())
  updated_at                 DateTime           @updatedAt
  jobs                       Job[]
  company_access             MisCompanyAccess[]
  reporting                  MisUser?           @relation("MisUserHierarchy", fields: [reporting_to], references: [user_id])
  subordinates               MisUser[]          @relation("MisUserHierarchy")
  user                       User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([access_level])
  @@index([job_posting_permissions])
  @@map("mis_user")
}

model MisCompanyAccess {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mis_user_id     String   @db.Uuid
  company_id      String   @db.Uuid
  can_create_jobs Boolean  @default(true)
  can_manage_jobs Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  company         Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  mis_user        MisUser  @relation(fields: [mis_user_id], references: [user_id], onDelete: Cascade)

  @@unique([mis_user_id, company_id])
  @@index([mis_user_id])
  @@index([company_id])
  @@map("mis_company_access")
}

model Job {
  id                   String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  creator_id           String          @db.Uuid
  creator_type         CreatorType
  title                String          @db.VarChar(200)
  description          String
  requirements         String?
  responsibilities     String?
  benefits             String?
  job_type             JobType
  experience_level     ExperienceLevel
  location             String?         @db.VarChar(200)
  remote_type          RemoteType
  salary_min           Float?
  salary_max           Float?
  currency             String?         @default("USD") @db.VarChar(3)
  salary_type          SalaryType?     @default(annual)
  equity_offered       Boolean         @default(false)
  ai_skills_required   Boolean         @default(false)
  application_deadline DateTime?
  status               JobStatus       @default(draft)
  published_at         DateTime?
  priority_level       Int             @default(1)
  views_count          Int             @default(0)
  applications_count   Int             @default(0)
  customCompanyName    String?
  customCompanyEmail   String?
  customCompanyPhone   String?
  customCompanyWebsite String?
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  company_id           String?         @db.Uuid
  applications         Application[]
  company              Company?        @relation(fields: [company_id], references: [id], onDelete: Cascade)
  creator_employer     Employer?       @relation(fields: [creator_id], references: [user_id], onDelete: Cascade, map: "jobs_creator_employer_fkey")        
  creator_mis_user     MisUser?        @relation(fields: [creator_id], references: [user_id], onDelete: Cascade, map: "jobs_creator_mis_user_fkey")
  skills               JobSkill[]
  views                JobView[]

  @@index([company_id])
  @@index([creator_id, creator_type])
  @@index([status])
  @@index([experience_level])
  @@index([remote_type])
  @@index([published_at])
  @@map("job")
}

model JobSkill {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id            String           @db.Uuid
  skill_id          String           @db.Uuid
  required_level    RequiredLevel
  proficiency_level ProficiencyLevel
  years_required    Float?
  weight            Float            @default(1.00)
  created_at        DateTime         @default(now())
  job               Job              @relation(fields: [job_id], references: [id], onDelete: Cascade)
  skill             Skill            @relation(fields: [skill_id], references: [id], onDelete: Cascade)

  @@unique([job_id, skill_id])
  @@index([job_id])
  @@index([skill_id])
  @@index([required_level])
  @@map("job_skill")
}

model JobView {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id       String   @db.Uuid
  user_id      String?  @db.Uuid
  ip_address   String?  @db.VarChar(45)
  user_agent   String?
  referrer_url String?
  viewed_at    DateTime @default(now())
  job          Job      @relation(fields: [job_id], references: [id], onDelete: Cascade)
  user         User?    @relation("UserJobViews", fields: [user_id], references: [id])

  @@index([job_id])
  @@index([user_id])
  @@index([viewed_at])
  @@map("job_view")
}

model Application {
  id                     String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id                 String            @db.Uuid
  candidate_id           String            @db.Uuid
  status                 ApplicationStatus @default(pending)
  applied_at             DateTime          @default(now())
  cover_letter           String?
  ai_match_score         Float?
  skill_match_percentage Float?
  experience_match_score Float?
  ai_readiness_match     Float?
  overall_fit_score      Float?
  recruiter_notes        String?
  candidate_notes        String?
  interview_scheduled_at DateTime?
  interview_completed_at DateTime?
  offer_extended_at      DateTime?
  offer_accepted_at      DateTime?
  rejection_reason       String?
  rejected_at            DateTime?
  withdrawn_at           DateTime?
  created_at             DateTime          @default(now())
  updated_at             DateTime          @updatedAt
  candidate              Candidate         @relation(fields: [candidate_id], references: [user_id], onDelete: Cascade)
  job                    Job               @relation(fields: [job_id], references: [id], onDelete: Cascade)
  interviews             Interview[]

  @@unique([job_id, candidate_id])
  @@index([job_id])
  @@index([candidate_id])
  @@index([status])
  @@index([overall_fit_score])
  @@index([applied_at])
  @@map("application")
}

model Interview {
  id                        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  application_id            String          @db.Uuid
  interviewer_id            String?         @db.Uuid
  interview_type            InterviewType
  status                    InterviewStatus @default(scheduled)
  scheduled_at              DateTime
  duration_minutes          Int             @default(60)
  meeting_link              String?
  meeting_id                String?         @db.VarChar(100)
  ai_conducted              Boolean         @default(false)
  ai_analysis               Json?
  interview_notes           String?
  technical_assessment_data Json?
  behavioral_scores         Json?
  communication_score       Float?
  technical_score           Float?
  cultural_fit_score        Float?
  overall_rating            Float?
  recommendation            Recommendation?
  feedback_for_candidate    String?
  recording_url             String?
  transcript                String?
  started_at                DateTime?
  completed_at              DateTime?
  created_at                DateTime        @default(now())
  updated_at                DateTime        @updatedAt
  application               Application     @relation(fields: [application_id], references: [id], onDelete: Cascade)
  interviewer               User?           @relation("UserConductedInterviews", fields: [interviewer_id], references: [id])

  @@index([application_id])
  @@index([interviewer_id])
  @@index([status])
  @@index([scheduled_at])
  @@index([interview_type])
  @@map("interview")
}

model Employer {
  user_id            String       @id @db.Uuid
  company_id         String       @db.Uuid
  job_title          String?      @db.VarChar(200)
  department         String?      @db.VarChar(100)
  role               EmployerRole
  permissions        Json?
  is_primary_contact Boolean      @default(false)
  phone_extension    String?      @db.VarChar(10)
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt
  company            Company      @relation(fields: [company_id], references: [id], onDelete: Cascade)
  user               User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  jobs               Job[]

  @@index([company_id])
  @@index([role])
  @@map("employer")
}

model RecruitmentAgency {
  user_id         String     @id @db.Uuid
  agency_id       String     @db.Uuid
  role            AgencyRole
  specialization  String?    @db.VarChar(200)
  clients         Json?
  commission_rate Float?
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  agency          Company    @relation(fields: [agency_id], references: [id], onDelete: Cascade)
  user            User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([agency_id])
  @@index([role])
  @@map("recruitment_agency")
}